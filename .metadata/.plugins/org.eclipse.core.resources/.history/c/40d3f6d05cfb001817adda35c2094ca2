#include <stdlib.h>
#include <stdio.h>
#include <time.h>

#include "pwm.h"
#include "servo_states.h"

pthread_t user_input_handle;
events user_events[2];
int user_input_ready=0;

// Returns the difference between two timespecs in seconds
double time_elapsed(struct timespec *start, struct timespec *current)
{
	double time_s  = (double)(current->tv_sec) - (double)(start->tv_sec);
	double time_ns = (double)(current->tv_nsec) - (double)(start->tv_nsec);
	return time_s + time_ns*1e-9;
}
// User Input Thread
void *userInput (void *arg)
{
printf("Give user inputs\n");
uint8_t user_input;
uint8_t input_idx = 0;
	while(1)
	{
		char input = getchar();
		{
			if (input_idx < 2) // Append to input command
			{
				user_input = getchar();
				user_events[input_idx] = parseInput(user_input);

				// Check for termination of current command
				// (And increment input_idx++)
				if (user_events[input_idx++] == terminate)
				{
					// Reset input buffer index
					input_idx = 0;

					// Place new command indicator
					printf("\r\n >>");
				}
			}

			else // Input command fully constructed, wait for CR
			{
				// Check for carraige return
				if (getchar() == '\r')
				{
					// Determine events input by user
					user_input_ready = 1;
				}
				// Reset input buffer index
				input_idx = 0;

				// Place new command indicator
				printf("\r\n >>");
			}
		}
		if (user_input_ready)
		processInput(user_events[0], user_events[1]);
	}
}
events parseInput(char input)
{
	// Handle user input
	if (input == 'C' || input == 'c') // Continue
		return resume;
	else if (input == 'P' || input == 'p') // Pause
		return pause_event;
	else if (input == 'L' || input == 'l') // move_left
		return move_left;
	else if (input == 'R' || input == 'r') // move_right
		return move_right;
	else if (input == 'B' || input == 'b') // begin
		return begin;
    else if (input == 'X' || input == 'x') // Terminate command
        return terminate;
	return nop;
}

int main(int argc, char *argv[])
{
	// Attempt to initialize PWM
	int error = pwm_init();
	if (error) // Exit on failure
		return -1;

	initServos();

	// Time keeping for servo control loop
	struct timespec start;
	struct timespec current;

	while(1)
	{
		// Keep track of loop iteration time
		clock_gettime(CLOCK_REALTIME, &start);

		// Handle user input

		recipeStep();


		clock_gettime(CLOCK_REALTIME, &current);
		double elapsed_time = time_elapsed(&start, &current) * 1000;

		// Sleep for the rest of the loop iteration duration
		usleep((100 - elapsed_time) * 1000);
	}

	return 0;
}
