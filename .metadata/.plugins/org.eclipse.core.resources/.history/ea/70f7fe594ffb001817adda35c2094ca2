#include <stdlib.h>
#include <stdio.h>
#include <time.h>

#include "pwm.h"

// Returns the difference between two timespecs in seconds
double time_elapsed(struct timespec *start, struct timespec *current)
{
	double time_s  = (double)(current->tv_sec) - (double)(start->tv_sec);
	double time_ns = (double)(current->tv_nsec) - (double)(start->tv_nsec);
	return time_s + time_ns*1e-9;
}

events parseInput(char input)
{
	// Handle user input
	if (input == 'C' || input == 'c') // Continue
		return resume;
	else if (input == 'P' || input == 'p') // Pause
		return pause;
	else if (input == 'L' || input == 'l') // move_left
		return move_left;
	else if (input == 'R' || input == 'r') // move_right
		return move_right;
	else if (input == 'B' || input == 'b') // begin
		return begin;
    else if (input == 'X' || input == 'x') // Terminate command
        return terminate;
	return nop;
}

int main(int argc, char *argv[])
{
	// Attempt to initialize PWM
	int error = pwm_init();
	if (error) // Exit on failure
		return -1;

	// Time keeping for servo control loop
	struct timespec start;
	struct timespec current;


	clock_gettime(CLOCK_REALTIME, &current);

	while(1)
	{
		clock_gettime(CLOCK_REALTIME, &start);
		// Handle user input





		// Sleep for the rest of the loop iteration duration
		usleep(100 * 1000 - time_elapsed);
	}

	return 0;
}
